// Allt i react 칛r uppbbyggt med HOOKS
import { useState } from 'react'
import './App.css'

type Post = {
    // id: number,
    title: string,
    likes: number,
}

const App = () => {

    // Stateful variabel
    // Array destructer 
    const [ msg, setMsg ] = useState<string>("Hi you, im't stateful!")
    const [ clicks, setClicks ] = useState<number>(0)
    
   

    // Beh칬ver s칛tta en Array of Post
    const [ post, setPost ] = useState<Post[]>([
        { title: "React rocks 游뱆游낕", likes: 1337 },
        { title: "JSX rocks even more 游뱆游낕", likes: 999 },
        { title: "Got state?", likes: 1337 },
    ]) // Det 칛r helt ok med vanliga variabler om man inte vill att dem ska 칬verleva rendeingarna

    // const [ post, setPost ] = useState<Post[]>([
    //     {id: 1, title: "React rocks 游뱆游낕", likes: 1337},
    //     {id: 2, title: "JSX rocks even more 游뱆游낕", likes: 999},
    //     {id: 3, title: "Got state?", likes: 1337},
    // ]) // Det 칛r helt ok med vanliga variabler om man inte vill att dem ska 칬verleva rendeingarna


    const handleBtnClick = () => {

        // Innan s친 n칛r vi skickade in clicks + 1 blev det 0 + 1, s친 s칛tt klickat kallades p친 talet 1. Men n칛r man skickar in en funktion s친 kommer den att k칬ra denna funktionen, s친 det nuvarande v칛rdet kommer att 칛ndras vid varje funktion. Den v칛ntar p친 funktionen retur v칛rde. Det blir som en k칬 till state uppdateringen. 
        setClicks((prevState) => {return prevState + 1}) // prevState = 0, reurn 1
        setClicks((prevState) => {return prevState + 1}) // prevState = 1, reurn 2

        // S친 beh칬ver prevState f칬r att kunna g칬ra dubbelt
       // setClicks(clicks + 1)
        //setClicks(clicks + 1) // F칬r att du har kopierat tv친 cklikc, s친 g칬r det inte att det blir fler klick pper g친ng, detta f칬r att den inte har hunnit uppdateras, s친 blir fortfarande bara ett klick
    }

    // let msg = 'Welcome to my application'
    // console.log(msg);



    const [ salary, setSalary ] = useState(10)

    const handleChangeSalary = (amount: number) => {
        if(salary + amount < 5){
            setSalary(5)
            return
        }

        setSalary(salary + amount)
    }


  return (
    <div className="App">
        <h1>React basic</h1>
        <h2>{msg}</h2>
        <p>U have cliked the button {clicks} times </p>

        <button className='btn btn-success btn-lg' onClick={handleBtnClick}> Click Me!</button>

        <button className='btn btn-warning btn-lg' onClick={() => {setMsg("Hey you")}}> Hey you!</button>

        <hr/>
        <p>Salary per hour: {salary} &euro;</p>
        { salary < 10 && (
            <div className="alert alert-warning">You got very low paied</div>
        )}

			<div className="buttons">
				<div className="mb-1">
					<button
						className="btn btn-primary btn-lg"
					onClick={() => handleChangeSalary (+ 1)}>Raise 1 &euro; 游뱀</button>
					<button
						className="btn btn-warning btn-lg"
                        onClick={() => handleChangeSalary( - 1)}>Decrease 1 &euro; 游땩</button>
				</div>

				<div className="mb-1">
					<button
						className="btn btn-success btn-lg"
                        onClick={() => handleChangeSalary( + 5)}>Raise 5 &euro; 游뱀游뱀游뱀</button>
					<button
						className="btn btn-danger btn-lg"
                        onClick={() => handleChangeSalary( - 5)}>Decrease 5 &euro; 游땩游땩游땩</button>
				</div>
			</div>

			<hr />

        <hr />

        <h2>Post</h2>
        <ul>
            { post.map( (post, index) => (
                //M친ste skriva n칛r du har lista av array och ska mappa 칬ver s친 m친set det finns en key (nucker). N칛r man k칬r map s친 m친ste det f칬sta elementet i ha en key: S친 den f칬rsta f칬r칛ldren inut map()
            <li key={index}>{post.title} ({post.likes})</li>
            ))
         }
        </ul>
    </div>
  )
}

export default App
